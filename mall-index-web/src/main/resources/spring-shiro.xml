<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="shiroSecurityFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- shiro的核心安全接口 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录地址 -->
        <property name="loginUrl" value="/login"/>
        <!-- 登陆成功后要跳转的连接 -->
        <property name="successUrl" value="/index"/>
        <!-- 未授权时要跳转的连接 -->
        <property name="unauthorizedUrl" value="/error.jsp"/>
        <property name="filters">
            <util:map>
                <!--用于我们自己在controller中实现登录逻辑时替代FormAuthenticationFilter-->
                <entry key="authc">
                    <bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
                </entry>
                <entry key="resourceCheckFilter">
                    <bean class="com.malaysia.core.shiro.ResourceCheckFilter"/>
                </entry>
            </util:map>
        </property>
        <!-- 配置过滤策略 -->
        <property name="filterChainDefinitions">
            <value>
                /css/** = anon
                /js/** = anon
                /images/** = anon
                /lib/** = anon
                /fonts/** = anon
                /skin/** = anon
                /login = anon
                /error.jsp = anon
                /admin = resourceCheckFilter
            </value>
        </property>
    </bean>
    <!--
        SecurityManager是Shiro架构核心，负责协调内部的安全组件工作。
     -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="authorizer" ref="authorizer"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="realm" ref="defaultUserRealm"/>
    </bean>

    <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <property name="permissionResolver" ref="UrlPermissionResovler"/>
    </bean>

    <bean id="UrlPermissionResovler" class="com.malaysia.core.shiro.UrlPermissionResovler">
    </bean>
    <!--
        负责取得授权信息和认证信息的类
    -->
    <bean id="defaultUserRealm" class="com.malaysia.shiro.DefaultUserRealm" ></bean>


    <!--
        用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理。
        根据cookie中的sessionId获取出session信息。如果禁用了cookie，则从请求参数中获取。代码参考此类的getSessionId方法
        属性说明：
        - globalSessionTimeout:会话的全局过期时间（毫秒为单位），默认30分钟
        - sessionIdCookie:sessionManager创建会话Cookie的模板
        - sessionListeners:回话监听器。用于监听会话创建、过期及停止事件。可以继承SessionListenerAdapter实现。
        - sessionValidationInterval:回话验证调度器,调度周期(毫秒).默认是1小时.。用于定期的验证会话是否已过期，如果过期将停止会话。
            出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；但是如在web环境中，如果用户不
            主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，Shiro提供了会话验证调度器
            SessionValidationScheduler来做这件事情。这里是使用JDK的ScheduledExecutorService进行定期调度并验证
            会话是否过期；
        - sessionDAO:回话持久化
        - sessionValidationSchedulerEnabled：是否开启会话验证器，默认是开启的；

    -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="#{30*60*1000}"/>
        <property name="sessionDAO" ref="redisSessionDAO"/>
        <property name="sessionValidationInterval" value="#{30*60*1000}"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionIdCookie" ref="wapsession"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!--
        指定本系统SESSIONID名称, 如果未指定默认为: JSESSIONID。
        默认名称与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认为JSESSIONID,
        当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失!
        属性说明：
        name：    设置Cookie名字，如果不指定默认为JSESSIONID；
        domain：  设置Cookie的域名，默认空，即当前访问的域名；
        path：    设置Cookie的路径，默认空，即存储在域名根下；
        maxAge：  设置Cookie的过期时间，秒为单位，默认-1，表示关闭浏览器时过期Cookie；
        httpOnly：如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；
                  此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持；
        sessionIdCookieEnabled：是否启用/禁用Session Id Cookie，默认是启用的；
                  - 当启用时，shiro会在给浏览器返回一个cookie，名字为前面指定的name属性的值；
                  - 如果禁用，将不返回给浏览器cookie。而是通过URL重写(在URL中增加JSESSIONID=id)来保存id。sessionid的名字为
                    JSESSIONID，在ShiroHttpSession.DEFAULT_SESSION_ID_NAME 中定义。
    -->
    <bean id="wapsession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <property name="name" value="SID"/>
    </bean>

    <!--
        用于定期的验证会话是否已过期，如果过期将停止会话。出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；
        但是如在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，Shiro提供了会话验证调度器
        SessionValidationScheduler来做这件事情。这里是使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期；
        - interval:设置调度时间间隔，单位毫秒，默认就是1小时；
        - sessionManager：设置会话验证调度器进行会话验证时的会话管理器；
    -->



    <!-- redisSessionDAO -->
    <bean id="redisSessionDAO" class="com.malaysia.core.shiro.RedisSessionDAO">
        <property name="redisManager" ref="redisManager" />
    </bean>

    <!-- cacheManager -->
    <bean id="cacheManager" class="com.malaysia.core.shiro.RedisCacheManager">
        <property name="redisManager" ref="redisManager" />
    </bean>

    <bean id="redisManager" class="com.malaysia.core.cache.RedisManager" />

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>
